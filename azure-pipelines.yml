trigger:
- master

pool: ADO_Agent
  


variables:
  buildConfiguration: 'Release'  

steps:

- task: JavaToolInstaller@0
  inputs:
    versionSpec: '16'
    jdkArchitectureOption: x64
    jdkSourceOption: 'AzureStorage'
    azureResourceManagerEndpoint: Azure Resource Manager
    azureStorageAccountName: ADO_Blob_Storage
    azureContainerName: jdks
    azureCommonVirtualFile: 'openjdk.zip'
    jdkDestinationDirectory: '$(agent.toolsDirectory)/jdk16'
    cleanDestinationDirectory: true

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration ${buildConfiguration}'

- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'SonarQube'
    scannerMode: 'MSBuild'
    projectKey: 'WeatherForecastApi_AYGwJeN6XO9sbJCMT7kZ'

- task: SonarQubeAnalyze@5

- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'

# - task: DotNetCoreCLI@2
#   displayName: Collect code coverage
#   inputs:
#     command: test
#     projects: '**/*WeatherForecastUnitTesting/*.csproj'
#     arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

# - task: VSTest@2
#   inputs:
#     testSelector: 'testAssemblies'
#     testAssemblyVer2: |
#       **\*WeatherForecastUnitTesting*.dll      
#     searchFolder: '$(System.DefaultWorkingDirectory)'
#     runOnlyImpactedTests: false
#     runInParallel: true
#     codeCoverageEnabled: true
#     testRunTitle: 'VSTest Automation Framework'
#     failOnMinTestsNotRun: true
#     rerunFailedTests: true
#     rerunFailedThreshold: '10'
#     rerunMaxAttempts: '2'
